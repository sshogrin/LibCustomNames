{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"index","text":""},{"location":"#types","title":"Types","text":"<ul> <li>class LibCustomNames</li> </ul>"},{"location":"types/LibCustomNames/","title":"class LibCustomNames","text":""},{"location":"types/LibCustomNames/#methods","title":"methods","text":""},{"location":"types/LibCustomNames/#libcustomnameshascustomname","title":"LibCustomNames.HasCustomName","text":"<pre><code>function LibCustomNames.HasCustomName(username: string) -&gt; hasCustomName boolean\n</code></pre> <p>@param <code>username</code> - The player's account name (e.g., \"@m00nyONE\").</p> <p>@return <code>hasCustomName</code> - <code>true</code> if a custom name exists, <code>false</code> otherwise.</p> <p>Checks whether a custom name exists for the given username.</p>"},{"location":"types/LibCustomNames/#libcustomnamesget","title":"LibCustomNames.Get","text":"<pre><code>function LibCustomNames.Get(\n  username: string,\n  colored: boolean?\n) -&gt; customName string?\n</code></pre> <p>@param <code>username</code> - The player's account name (e.g., \"@m00nyONE\").</p> <p>@param <code>colored</code> - Whether to return the colored name. Defaults to <code>true</code>.</p> <p>@return <code>customName</code> - The custom name if it exists, or <code>nil</code> otherwise.</p> <p>Retrieves the custom name for a given username.</p> <p>If <code>colored</code> is <code>true</code> or <code>nil</code>, the colored version will be returned. If <code>colored</code> is <code>false</code>, the uncolored version will be returned. Falls back to the uncolored version if the colored one is missing.</p>"},{"location":"types/LibCustomNames/#libcustomnamesgetcolored","title":"LibCustomNames.GetColored","text":"<pre><code>function LibCustomNames.GetColored(username: string) -&gt; customName string?\n</code></pre> <p>@param <code>username</code> - The player's account name (e.g., \"@m00nyONE\").</p> <p>@return <code>customName</code> - The custom name if it exists, or <code>nil</code> otherwise.</p> <p>Retrieves the colored custom name for a given username.</p>"},{"location":"types/LibCustomNames/#libcustomnamesgetuncolored","title":"LibCustomNames.GetUncolored","text":"<pre><code>function LibCustomNames.GetUncolored(username: string) -&gt; customName string?\n</code></pre> <p>@param <code>username</code> - The player's account name (e.g., \"@m00nyONE\").</p> <p>@return <code>customName</code> - The custom name if it exists, or <code>nil</code> otherwise.</p> <p>Retrieves the uncolored custom name for a given username.</p>"},{"location":"types/LibCustomNames/#libcustomnamesgetall","title":"LibCustomNames.GetAll","text":"<pre><code>function LibCustomNames.GetAll() -&gt;  table&lt;string,string[]&gt;\n</code></pre> <p>Retrieves all custom names from the internal table as a deep copy. Editing the returning table has no effect to the internal one that is used to retrieve actual names.</p>"},{"location":"types/LibCustomNames/#libcustomnamesgetcustomnamecount","title":"LibCustomNames.GetCustomNameCount","text":"<pre><code>function LibCustomNames.GetCustomNameCount() -&gt; count number\n</code></pre> <p>@return <code>count</code> - The number of custom names</p> <p>Returns the number of registered custom names. The result is cached after the first computation.</p>"},{"location":"types/LibCustomNames/#fields","title":"fields","text":""},{"location":"types/LibCustomNames/#libcustomnamesname","title":"LibCustomNames.name","text":"<pre><code>LibCustomNames.name: string = \"LibCustomNames\"\n</code></pre>"},{"location":"types/LibCustomNames/#libcustomnamesversion","title":"LibCustomNames.version","text":"<pre><code>LibCustomNames.version: string = \"dev\"\n</code></pre>"},{"location":"types/LibCustomNames/#libcustomnamesauthor","title":"LibCustomNames.author","text":"<pre><code>LibCustomNames.author: string = \"@m00nyONE\"\n</code></pre>"}]}